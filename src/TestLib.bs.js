// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");

function assertEqual($staropt$star, expected, actual, description) {
  var cmp = $staropt$star !== undefined ? $staropt$star : Caml_obj.caml_equal;
  return {
          result: Curry._2(cmp, expected, actual),
          description: description
        };
}

function myBoolCmp(ba, bb) {
  if (ba) {
    if (bb) {
      return true;
    } else {
      return false;
    }
  } else if (bb) {
    return false;
  } else {
    return true;
  }
}

function _runSuite(suite) {
  return List.filter((function (a) {
                  return a.result !== true;
                }))(List.flatten(List.map((function (t) {
                        return Curry._1(t, /* () */0);
                      }), suite)));
}

function runSuite(suite) {
  var failingTests = _runSuite(suite);
  var failingDescriptions = List.map((function (t) {
          return t.description;
        }), failingTests);
  console.log("Failing tests:");
  return Belt_List.forEach(failingDescriptions, (function (prim) {
                console.log(prim);
                return /* () */0;
              }));
}

exports.assertEqual = assertEqual;
exports.myBoolCmp = myBoolCmp;
exports._runSuite = _runSuite;
exports.runSuite = runSuite;
/* No side effect */
