// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

var cmp = Caml_obj.caml_compare;

var SuitComparable = Belt_Id.MakeComparable({
      cmp: cmp
    });

var allSuits = /* :: */[
  /* Clubs */0,
  /* :: */[
    /* Diamonds */1,
    /* :: */[
      /* Hearts */2,
      /* :: */[
        /* Spades */3,
        /* [] */0
      ]
    ]
  ]
];

var allRanks = /* :: */[
  0,
  /* :: */[
    1,
    /* :: */[
      2,
      /* :: */[
        3,
        /* :: */[
          4,
          /* :: */[
            5,
            /* :: */[
              6,
              /* :: */[
                7,
                /* :: */[
                  8,
                  /* :: */[
                    9,
                    /* :: */[
                      10,
                      /* :: */[
                        11,
                        /* :: */[
                          12,
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function dealCascades(freeCell) {
  var allPairs = function (e, l2) {
    return Belt_List.map(l2, (function (le) {
                  return /* tuple */[
                          e,
                          le
                        ];
                }));
  };
  var generateCombinations = function (s1, s2) {
    return Belt_List.reduce(s1, /* [] */0, (function (a, e) {
                  return List.concat(/* :: */[
                              a,
                              /* :: */[
                                allPairs(e, s2),
                                /* [] */0
                              ]
                            ]);
                }));
  };
  var cards = Belt_List.map(generateCombinations(allSuits, allRanks), (function (c) {
          return {
                  suit: c[0],
                  rank: c[1]
                };
        }));
  var cascades = Belt_List.reverse(Belt_List.reduce(/* :: */[
            7,
            /* :: */[
              7,
              /* :: */[
                7,
                /* :: */[
                  7,
                  /* :: */[
                    6,
                    /* :: */[
                      6,
                      /* :: */[
                        6,
                        /* :: */[
                          6,
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ], {
            cascades: /* [] */0,
            taken: 0
          }, (function (cascadeBuilder, length) {
              var cascade = Belt_Option.getExn(Belt_List.take(Belt_Option.getExn(Belt_List.drop(cards, cascadeBuilder.taken)), length));
              return {
                      cascades: Belt_List.add(cascadeBuilder.cascades, cascade),
                      taken: cascadeBuilder.taken + length | 0
                    };
            })).cascades);
  return {
          cards: cascades
        };
}

var Command = {
  dealCascades: dealCascades
};

var emptyFreeCell = {
  cards: /* :: */[
    /* [] */0,
    /* [] */0
  ]
};

exports.SuitComparable = SuitComparable;
exports.allSuits = allSuits;
exports.allRanks = allRanks;
exports.emptyFreeCell = emptyFreeCell;
exports.Command = Command;
/* SuitComparable Not a pure module */
